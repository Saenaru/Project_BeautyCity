from telegram import Update
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from bot.keyboards import (
    get_main_menu_keyboard,
    get_tips_keyboard,
    get_payment_keyboard
)
from salon.models import Appointment
from asgiref.sync import sync_to_async
from django.db import transaction

@sync_to_async
def get_appointment(appointment_id):
    return Appointment.objects.select_related('master', 'client', 'service').get(id=appointment_id)

@sync_to_async
def save_payment(appointment):
    with transaction.atomic():
        appointment.is_paid = True
        appointment.save()

async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        appointment_id = int(query.data.split('_')[1])
        appointment = await get_appointment(appointment_id)
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–µ
        await save_payment(appointment)
        
        await query.edit_message_text(
            "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –±–∞–Ω–∫–∞...\n\n"
            "–î–ª—è —Ç–µ—Å—Ç–∞ –æ–ø–ª–∞—Ç–∞ –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ!"
        )
        
        await query.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ –º–∞—Å—Ç–µ—Ä—É?",
            reply_markup=get_tips_keyboard(appointment_id)
        )
    except Appointment.DoesNotExist:
        await query.edit_message_text(
            "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

@sync_to_async
def save_tips(appointment_id, tip_amount):
    with transaction.atomic():
        appointment = Appointment.objects.select_for_update().get(id=appointment_id)
        appointment.tip_amount = tip_amount
        appointment.tip_paid = True
        appointment.save()
        return appointment

async def handle_tips(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        appointment_id = int(query.data.split('_')[1])
        tip_amount = int(query.data.split('_')[2])
        
        await save_tips(appointment_id, tip_amount)
        
        await query.edit_message_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —á–∞–µ–≤—ã–µ –≤ —Ä–∞–∑–º–µ—Ä–µ {tip_amount}‚ÇΩ!\n"
            "–ú–∞—Å—Ç–µ—Ä –±—É–¥–µ—Ç –æ—á–µ–Ω—å —Ä–∞–¥ üòä"
        )
    except Appointment.DoesNotExist:
        await query.edit_message_text(
            "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    except Exception as e:
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–µ–≤—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def register_handlers(application):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã (pay_123 –≥–¥–µ 123 - ID –∑–∞–ø–∏—Å–∏)
    application.add_handler(CallbackQueryHandler(handle_payment, pattern="^pay_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–∞–µ–≤—ã—Ö (tip_123_500 –≥–¥–µ 123 - ID –∑–∞–ø–∏—Å–∏, 500 - —Å—É–º–º–∞)
    application.add_handler(CallbackQueryHandler(handle_tips, pattern="^tip_"))