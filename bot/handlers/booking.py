from telegram import Update
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    filters,
    ConversationHandler,
    ContextTypes
)
from bot.keyboards import (
    get_main_menu_keyboard,
    generate_masters_keyboard,
    generate_services_keyboard,
    generate_salons_keyboard,
    generate_dates_keyboard,
    generate_times_keyboard,
    confirm_keyboard
)
from asgiref.sync import sync_to_async
import re
from salon.models import Master, Service, Salon, Appointment, Client, MasterSchedule
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    CHOOSE_PATH, CHOOSE_MASTER, CHOOSE_SERVICE, 
    CHOOSE_SALON, CHOOSE_DATE, CHOOSE_TIME,
    ENTER_NAME, ENTER_PHONE, CONFIRM_BOOKING
) = range(9)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è ORM –∑–∞–ø—Ä–æ—Å–æ–≤
@sync_to_async
def get_master(master_id):
    return Master.objects.get(id=master_id)

@sync_to_async
def get_service(service_id):
    return Service.objects.get(id=service_id)

@sync_to_async
def get_salon(salon_id):
    return Salon.objects.get(id=salon_id)

@sync_to_async
def get_master_services(master_id):
    master = Master.objects.get(id=master_id)
    return list(master.services.filter(is_active=True))

@sync_to_async
def get_master_salon(master_id):
    try:
        master = Master.objects.get(id=master_id)
        return master.salon
    except Master.DoesNotExist:
        return None

@sync_to_async
def get_master_schedule(master_id, date):
    return MasterSchedule.objects.filter(master_id=master_id, date=date).first()

@sync_to_async
def get_or_create_client(telegram_id, defaults):
    return Client.objects.get_or_create(telegram_id=telegram_id, defaults=defaults)

@sync_to_async
def create_appointment(client, master_id, service_id, salon_id, date, time):
    return Appointment.objects.create(
        client=client,
        master_id=master_id,
        service_id=service_id,
        salon_id=salon_id,
        appointment_date=date,
        appointment_time=time,
        status='confirmed'
    )

async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    context.user_data.clear()
    
    if text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –ª—é–±–∏–º–æ–º—É –º–∞—Å—Ç–µ—Ä—É":
        context.user_data['flow'] = 'by_master'
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=await generate_masters_keyboard()
        )
        return CHOOSE_MASTER
    elif text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É":
        context.user_data['flow'] = 'by_service'
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=await generate_services_keyboard()
        )
        return CHOOSE_SERVICE
    elif text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å–∞–ª–æ–Ω":
        context.user_data['flow'] = 'by_salon'
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω:",
            reply_markup=await generate_salons_keyboard()
        )
        return CHOOSE_SALON


async def choose_master(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    master_id = int(query.data.split('_')[1])
    master = await get_master(master_id)
    context.user_data['master_id'] = master_id
    
    if context.user_data.get('flow') == 'by_salon':
        # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ –≤ —Å–∞–ª–æ–Ω–µ –≤—ã–±–∏—Ä–∞–µ–º —É—Å–ª—É–≥—É
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=await generate_services_keyboard(master_id=master_id)
        )
        return CHOOSE_SERVICE
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=await generate_services_keyboard(master_id=master_id)
    )
    return CHOOSE_SERVICE


async def choose_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    service_id = int(query.data.split('_')[1])
    service = await get_service(service_id)
    
    context.user_data['service_id'] = service_id
    context.user_data['service_name'] = service.name
    context.user_data['service_price'] = float(service.price)
    
    # –î–ª—è –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ —Å–∞–ª–æ–Ω –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å–∞–ª–æ–Ω–∞
    if context.user_data.get('flow') == 'by_salon':
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=await generate_dates_keyboard()
        )
        return CHOOSE_DATE
    
    if 'master_id' in context.user_data:
        salon = await get_master_salon(context.user_data['master_id'])
        if salon:
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω:",
                reply_markup=await generate_salons_keyboard(salon.id)
            )
        else:
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω:",
                reply_markup=await generate_salons_keyboard()
            )
    else:
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω:",
            reply_markup=await generate_salons_keyboard()
        )
    
    return CHOOSE_SALON

async def choose_salon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    salon_id = int(query.data.split('_')[1])
    salon = await get_salon(salon_id)
    context.user_data['salon_id'] = salon_id
    context.user_data['salon_name'] = salon.name
    context.user_data['salon_address'] = salon.address
    
    if context.user_data.get('flow') == 'by_salon':
        # –î–ª—è –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ —Å–∞–ª–æ–Ω —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –≤ —ç—Ç–æ–º —Å–∞–ª–æ–Ω–µ:",
            reply_markup=await generate_masters_keyboard(salon_id=salon_id)
        )
        return CHOOSE_MASTER
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=await generate_dates_keyboard()
    )
    return CHOOSE_DATE


async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_date = query.data.split('_')[1]
    context.user_data['date'] = selected_date
    
    master_id = context.user_data.get('master_id')
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=await generate_times_keyboard(master_id=master_id, date=selected_date)
    )
    return CHOOSE_TIME

async def choose_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    time = query.data.split('_')[1]
    context.user_data['time'] = time
    
    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return ENTER_NAME

async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    context.user_data['name'] = name
    
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return ENTER_PHONE

async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    
    if not re.match(r'^\+?1?\d{9,15}$', phone):
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return ENTER_PHONE
    
    required_data = ['name', 'salon_id', 'service_id', 'date', 'time']
    for field in required_data:
        if field not in context.user_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END

    context.user_data['phone'] = phone
    
    booking_info = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
    booking_info += f"üë§ –ò–º—è: {context.user_data['name']}\n"
    booking_info += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
    
    if 'master_id' in context.user_data:
        master = await get_master(context.user_data['master_id'])
        booking_info += f"üë©‚Äçüé® –ú–∞—Å—Ç–µ—Ä: {master.first_name} {master.last_name}\n"
    
    if 'service_name' in context.user_data:
        booking_info += f"üíÖ –£—Å–ª—É–≥–∞: {context.user_data['service_name']} ({context.user_data['service_price']}‚ÇΩ)\n"
    
    booking_info += f"üè† –°–∞–ª–æ–Ω: {context.user_data['salon_name']}\n"
    booking_info += f"üìç –ê–¥—Ä–µ—Å: {context.user_data['salon_address']}\n"
    booking_info += f"üìÖ –î–∞—Ç–∞: {context.user_data['date']}\n"
    booking_info += f"‚è∞ –í—Ä–µ–º—è: {context.user_data['time']}\n"
    
    await update.message.reply_text(
        booking_info,
        reply_markup=await confirm_keyboard()
    )
    return CONFIRM_BOOKING

async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'confirm_yes':
        try:
            required_fields = ['service_id', 'salon_id', 'date', 'time']
            for field in required_fields:
                if field not in context.user_data:
                    raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
            
            service_id = context.user_data['service_id']
            salon_id = context.user_data['salon_id']
            date = datetime.strptime(context.user_data['date'], '%Y-%m-%d').date()
            time = datetime.strptime(context.user_data['time'], '%H:%M').time()
            
            master_id = context.user_data.get('master_id')
            if not master_id:
                master = await sync_to_async(
                    lambda: Master.objects.filter(services__id=service_id, is_active=True).first()
                )()
                if not master:
                    await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏")
                    return ConversationHandler.END
                master_id = master.id
            
            client, created = await get_or_create_client(
                update.effective_user.id,
                defaults={
                    'first_name': context.user_data.get('name', ''),
                    'last_name': '',
                    'phone': context.user_data.get('phone', ''),
                    'telegram_username': update.effective_user.username
                }
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–Ω–æ –ª–∏ –≤—Ä–µ–º—è —É –º–∞—Å—Ç–µ—Ä–∞
            is_time_available = await sync_to_async(
                lambda: not Appointment.objects.filter(
                    master_id=master_id,
                    appointment_date=date,
                    appointment_time=time,
                    status='confirmed'
                ).exists()
            )()
            
            if not is_time_available:
                await query.edit_message_text(
                    "‚è≥ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–∞—Å—Ç–µ—Ä –≤ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
                    reply_markup=await generate_times_keyboard()
                )
                return CHOOSE_TIME
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω–æ, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            appointment = await create_appointment(
                client=client,
                master_id=master_id,
                service_id=service_id,
                salon_id=salon_id,
                date=date,
                time=time
            )
            
            await query.edit_message_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å #{appointment.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ñ–¥–µ–º –≤–∞—Å –≤ —Å–∞–ª–æ–Ω–µ.\n\n"
                f"–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ? /start"
            )
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await query.edit_message_text(
            "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ /start"
        )
    
    context.user_data.clear()
    return ConversationHandler.END


def register_handlers(application):
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & (
                filters.Regex('^–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –ª—é–±–∏–º–æ–º—É –º–∞—Å—Ç–µ—Ä—É$') |
                filters.Regex('^–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É$') |
                filters.Regex('^–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å–∞–ª–æ–Ω$')
            ), start_booking)
        ],
        states={
            CHOOSE_PATH: [MessageHandler(filters.TEXT, start_booking)],
            CHOOSE_MASTER: [CallbackQueryHandler(choose_master)],
            CHOOSE_SERVICE: [CallbackQueryHandler(choose_service)],
            CHOOSE_SALON: [CallbackQueryHandler(choose_salon)],
            CHOOSE_DATE: [CallbackQueryHandler(choose_date)],
            CHOOSE_TIME: [CallbackQueryHandler(choose_time)],
            ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)],
            ENTER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_phone)],
            CONFIRM_BOOKING: [CallbackQueryHandler(confirm_booking)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=await get_main_menu_keyboard()
    )
    return ConversationHandler.END