from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CommandHandler,
    ConversationHandler  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç ConversationHandler
)
from asgiref.sync import sync_to_async
from salon.models import Appointment, Feedback, Admin
from datetime import datetime, timedelta
from bot.keyboards import get_main_menu_keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_DATE = 1

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è ORM –∑–∞–ø—Ä–æ—Å–æ–≤
@sync_to_async
def is_admin(telegram_id):
    return Admin.objects.filter(telegram_id=telegram_id, is_active=True).exists()

@sync_to_async
def get_all_appointments(date=None):
    queryset = Appointment.objects.select_related('client', 'master', 'service', 'salon')
    if date:
        queryset = queryset.filter(appointment_date=date)
    return list(queryset.order_by('appointment_date', 'appointment_time'))

@sync_to_async
def get_all_feedback():
    return list(Feedback.objects.all().order_by('-created_at'))

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_user.id):
        return

    keyboard = [
        [InlineKeyboardButton("üìù –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="admin_all_appointments")],
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ", callback_data="admin_appointments_by_date")],
        [InlineKeyboardButton("üì¢ –í—Å–µ –æ—Ç–∑—ã–≤—ã", callback_data="admin_all_feedback")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back_to_main")]
    ]
    
    await update.message.reply_text(
        "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_all_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    appointments = await get_all_appointments()
    
    if not appointments:
        await query.edit_message_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    
    message = "üìù –í—Å–µ –∑–∞–ø–∏—Å–∏:\n\n"
    for app in appointments:
        message += (
            f"üîπ {app.client.first_name} {app.client.last_name or ''}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {app.client.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üë©‚Äçüé® –ú–∞—Å—Ç–µ—Ä: {app.master.first_name} {app.master.last_name}\n"
            f"üíÖ –£—Å–ª—É–≥–∞: {app.service.name}\n"
            f"üìÖ –î–∞—Ç–∞: {app.appointment_date.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {app.appointment_time.strftime('%H:%M')}\n"
            f"üè† –°–∞–ª–æ–Ω: {app.salon.name}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' if app.status == 'confirmed' else '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'}\n\n"
        )
    
    await query.edit_message_text(message[:4000])

async def show_appointments_by_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2025):"
    )
    return WAITING_FOR_DATE

async def handle_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date = datetime.strptime(update.message.text, '%d.%m.%Y').date()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return WAITING_FOR_DATE
    
    appointments = await get_all_appointments(date)
    
    if not appointments:
        await update.message.reply_text(f"–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ {date.strftime('%d.%m.%Y')}.")
        return ConversationHandler.END
    
    message = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {date.strftime('%d.%m.%Y')}:\n\n"
    for app in appointments:
        message += (
            f"üîπ {app.client.first_name} {app.client.last_name or ''}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {app.client.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üë©‚Äçüé® –ú–∞—Å—Ç–µ—Ä: {app.master.first_name} {app.master.last_name}\n"
            f"üíÖ –£—Å–ª—É–≥–∞: {app.service.name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {app.appointment_time.strftime('%H:%M')}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' if app.status == 'confirmed' else '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'}\n\n"
        )
    
    await update.message.reply_text(message[:4000])
    return ConversationHandler.END

async def show_all_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    feedbacks = await get_all_feedback()
    
    if not feedbacks:
        await query.edit_message_text("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        return
    
    message = "üì¢ –í—Å–µ –æ—Ç–∑—ã–≤—ã:\n\n"
    for fb in feedbacks:
        message += (
            f"üë§ {fb.client_name} ({fb.telegram_username or '–Ω–µ—Ç username'})\n"
            f"üìÖ {fb.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üí¨ –û—Ç–∑—ã–≤: {fb.text}\n"
            f"–ú–∞—Å—Ç–µ—Ä: {fb.master.first_name if fb.master else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω' if fb.is_processed else '‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'}\n\n"
        )
    
    await query.edit_message_text(message[:4000])

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await get_main_menu_keyboard()
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=await get_main_menu_keyboard()
    )
    return ConversationHandler.END

def register_handlers(application):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /admin
    application.add_handler(CommandHandler('admin', admin_menu))
    
    # ConversationHandler –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–∞—Ç–µ
    date_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(show_appointments_by_date, pattern="^admin_appointments_by_date$")],
        states={
            WAITING_FOR_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date_input)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    application.add_handler(date_conv)
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(CallbackQueryHandler(show_all_appointments, pattern="^admin_all_appointments$"))
    application.add_handler(CallbackQueryHandler(show_all_feedback, pattern="^admin_all_feedback$"))
    application.add_handler(CallbackQueryHandler(back_to_main, pattern="^admin_back_to_main$"))