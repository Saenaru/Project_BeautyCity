import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ContextTypes, 
    CommandHandler, 
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler
)
from bot.keyboards import get_main_menu_keyboard
from asgiref.sync import sync_to_async
from salon.models import Appointment, Client, Feedback, Admin
from datetime import datetime
from django.conf import settings
from telegram.constants import ParseMode
import os

FEEDBACK = range(1)

CONSENT = range(1)

@sync_to_async
def is_admin(telegram_id):
    return Admin.objects.filter(telegram_id=telegram_id, is_active=True).exists()

async def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return ReplyKeyboardMarkup([
        [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –ª—é–±–∏–º–æ–º—É –º–∞—Å—Ç–µ—Ä—É")],
        [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É")],
        [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å–∞–ª–æ–Ω")],
        [KeyboardButton("–ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton("–í—Å–µ –∑–∞–ø–∏—Å–∏"), KeyboardButton("–í—Å–µ –æ—Ç–∑—ã–≤—ã")],  # –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")],
        [KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
        [KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ")]
    ], resize_keyboard=True)

async def get_user_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return ReplyKeyboardMarkup([
        [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –ª—é–±–∏–º–æ–º—É –º–∞—Å—Ç–µ—Ä—É")],
        [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É")],
        [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å–∞–ª–æ–Ω")],
        [KeyboardButton("–ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")],
        [KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
        [KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ")]
    ], resize_keyboard=True)



async def start_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –º–∞—Å—Ç–µ—Ä–µ –∏–ª–∏ —Å–∞–ª–æ–Ω–µ.\n"
        "–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∏–º—è –º–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return FEEDBACK

async def receive_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    feedback_text = update.message.text
    user = update.effective_user
    
    await sync_to_async(Feedback.objects.create)(
        client_telegram_id=user.id,
        client_name=f"{user.first_name} {user.last_name or ''}",
        text=feedback_text,
        telegram_username=user.username
    )
    
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.",
        reply_markup=await get_main_menu_keyboard()
    )
    return ConversationHandler.END

async def cancel_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–∑—ã–≤ –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
        reply_markup=await get_main_menu_keyboard()
    )
    return ConversationHandler.END


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è ORM –∑–∞–ø—Ä–æ—Å–æ–≤
@sync_to_async
def get_client_appointments(telegram_id):
    now = datetime.now()
    return list(Appointment.objects.filter(
        client__telegram_id=telegram_id,
        appointment_date__gte=now.date(),
        status='confirmed'
    ).select_related('service', 'master', 'salon').order_by('appointment_date', 'appointment_time'))

@sync_to_async
def cancel_appointment(appointment_id):
    try:
        appointment = Appointment.objects.get(id=appointment_id)
        appointment.status = 'cancelled'
        appointment.save()
        return True, appointment
    except Appointment.DoesNotExist:
        return False, None

@sync_to_async
def update_or_create_client(telegram_id, defaults):
    client, created = Client.objects.get_or_create(
        telegram_id=telegram_id,
        defaults=defaults
    )
    if not created:
        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        for key, value in defaults.items():
            setattr(client, key, value)
        client.save()
    return client, created

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
async def my_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    appointments = await get_client_appointments(user.id)
    
    if not appointments:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.",
            reply_markup=await get_main_menu_keyboard()
        )
        return
    
    message = "üìÖ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
    keyboard = []
    
    for appointment in appointments:
        message += (
            f"üîπ {appointment.service.name} —É {appointment.master.first_name}\n"
            f"üè† –°–∞–ª–æ–Ω: {appointment.salon.name}\n"
            f"üìÖ –î–∞—Ç–∞: {appointment.appointment_date.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {appointment.appointment_time.strftime('%H:%M')}\n"
            f"üíµ –°—É–º–º–∞: {appointment.service.price}‚ÇΩ\n\n"  # –£–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã
        )
        keyboard.append([InlineKeyboardButton(
            f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {appointment.appointment_date.strftime('%d.%m')} –≤ {appointment.appointment_time.strftime('%H:%M')}",
            callback_data=f"cancel_{appointment.id}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    await update.message.reply_text(
        message,
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
async def cancel_appointment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    appointment_id = int(query.data.split('_')[1])
    success, appointment = await cancel_appointment(appointment_id)
    
    if success:
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ {appointment.appointment_date.strftime('%d.%m.%Y')} –≤ {appointment.appointment_time.strftime('%H:%M')} –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=None  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        )
    else:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=None
        )

async def send_tips(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tip_url = "https://pay.cloudtips.ru/p/b643f03c"
    
    await update.message.reply_text(
        "üíù –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ –Ω–∞—à–µ–º—É –º–∞—Å—Ç–µ—Ä—É —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:\n\n"
        f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {tip_url}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —â–µ–¥—Ä–æ—Å—Ç—å! –ú–∞—Å—Ç–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏—Ç –≤–∞—à—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=tip_url)]
        ])
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    admin = await is_admin(user.id)
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
    reply_markup = await get_admin_keyboard() if admin else await get_user_keyboard()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏)
        client = await sync_to_async(Client.objects.get)(telegram_id=user.id)
        
        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –¥–∞–≤–∞–ª —Å–æ–≥–ª–∞—Å–∏–µ
        if client.consent_given:
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BeautyCity! üéâ",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
            
        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –µ—Å—Ç—å, –Ω–æ —Å–æ–≥–ª–∞—Å–∏—è –Ω–µ—Ç
        await request_consent(update)
        return CONSENT
        
    except Client.DoesNotExist:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
        client = await sync_to_async(Client.objects.create)(
            telegram_id=user.id,
            first_name=user.first_name,
            last_name=user.last_name or '',
            telegram_username=user.username,
            consent_given=False
        )
        await request_consent(update)
        return CONSENT


async def request_consent(update: Update):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è"""
    await update.message.reply_text(
        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ..."
    )
    
    current_dir = os.path.dirname(os.path.abspath(__file__))
    consent_path = os.path.join(current_dir, 'consent.pdf')
    
    await update.message.reply_document(
        document=open(consent_path, 'rb'),
        caption="–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ", callback_data="consent_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_no")]
        ])
    )


async def handle_consent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "consent_yes":
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞
        await sync_to_async(Client.objects.filter(telegram_id=query.from_user.id).update)(
            consent_given=True,
            consent_given_at=datetime.now()
        )
        
        await query.edit_message_text(
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞.",
            reply_markup=None
        )
        
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await get_main_menu_keyboard()
        )
    else:
        await query.edit_message_text(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start.",
            reply_markup=None
        )
    
    return ConversationHandler.END


async def phone_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üìû –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n"
        f"‚òéÔ∏è {settings.MANAGER_PHONE}\n\n"
        f"–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 9:00 –¥–æ 19:00 –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö.",
        reply_markup=await get_main_menu_keyboard()
    )

async def handle_consent_yes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞
    await sync_to_async(Client.objects.filter(
        telegram_id=query.from_user.id
    ).update)(
        consent_given=True,
        consent_given_at=datetime.now()
    )
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è
    await query.edit_message_reply_markup(reply_markup=None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text="‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await get_main_menu_keyboard()
    )
    return ConversationHandler.END

async def handle_consent_no(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await query.edit_message_reply_markup(reply_markup=None)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text="‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
             "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–∑–∂–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start."
    )
    return ConversationHandler.END


async def all_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    appointments = await sync_to_async(list)(Appointment.objects.select_related(
        'client', 'master', 'service', 'salon'
    ).order_by('-appointment_date', '-appointment_time'))

    if not appointments:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    message = "üìù –í—Å–µ –∑–∞–ø–∏—Å–∏:\n\n"
    for app in appointments:
        message += (
            f"üîπ {app.client.first_name} {app.client.last_name or ''}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {app.client.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üë©‚Äçüé® –ú–∞—Å—Ç–µ—Ä: {app.master.first_name} {app.master.last_name}\n"
            f"üíÖ –£—Å–ª—É–≥–∞: {app.service.name}\n"
            f"üìÖ –î–∞—Ç–∞: {app.appointment_date.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {app.appointment_time.strftime('%H:%M')}\n"
            f"üè† –°–∞–ª–æ–Ω: {app.salon.name}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' if app.status == 'confirmed' else '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'}\n\n"
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    for i in range(0, len(message), 4096):
        await update.message.reply_text(message[i:i+4096])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –æ—Ç–∑—ã–≤—ã"
async def all_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    feedbacks = await sync_to_async(list)(Feedback.objects.select_related(
        'master'
    ).order_by('-created_at'))

    if not feedbacks:
        await update.message.reply_text("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        return

    message = "üì¢ –í—Å–µ –æ—Ç–∑—ã–≤—ã:\n\n"
    for fb in feedbacks:
        message += (
            f"üë§ {fb.client_name} ({fb.telegram_username or '–Ω–µ—Ç username'})\n"
            f"üìÖ {fb.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üí¨ –û—Ç–∑—ã–≤: {fb.text}\n"
            f"–ú–∞—Å—Ç–µ—Ä: {fb.master.first_name if fb.master else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω' if fb.is_processed else '‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'}\n\n"
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    for i in range(0, len(message), 4096):
        await update.message.reply_text(message[i:i+4096])



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    is_admin = await sync_to_async(Admin.objects.filter(telegram_id=update.effective_user.id, is_active=True).exists)()
    
    message = (
        "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –¥–ª—è –∑–∞–ø–∏—Å–∏!"
    )
    
    if is_admin:
        message += "\n\n–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        message += "/admin - –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        message += "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏ –æ—Ç–∑—ã–≤–æ–≤"
    
    await update.message.reply_text(message)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=await get_main_menu_keyboard()
    )
    return ConversationHandler.END

def register_handlers(application):
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è
    consent_conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CONSENT: [
                CallbackQueryHandler(handle_consent_yes, pattern="^consent_yes$"),
                CallbackQueryHandler(handle_consent_no, pattern="^consent_no$")
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(consent_conv)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    application.add_handler(MessageHandler(filters.Regex('^–í—Å–µ –∑–∞–ø–∏—Å–∏$'), all_appointments))
    application.add_handler(MessageHandler(filters.Regex('^–í—Å–µ –æ—Ç–∑—ã–≤—ã$'), all_feedback))

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(MessageHandler(filters.Regex('^–ú–æ–∏ –∑–∞–ø–∏—Å–∏$'), my_appointments))
    application.add_handler(MessageHandler(filters.Regex('^–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É$'), phone_booking))
    application.add_handler(CallbackQueryHandler(cancel_appointment_handler, pattern="^cancel_"))
    
    feedback_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤$'), start_feedback)],
        states={
            FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_feedback)]
        },
        fallbacks=[CommandHandler('cancel', cancel_feedback)]
    )
    application.add_handler(feedback_conv)
    
    application.add_handler(MessageHandler(filters.Regex('^–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ$'), send_tips))