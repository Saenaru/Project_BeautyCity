from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ContextTypes, 
    CommandHandler, 
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler
)
from bot.keyboards import get_main_menu_keyboard
from asgiref.sync import sync_to_async
from salon.models import Appointment, Client, Feedback
from datetime import datetime
from django.conf import settings

FEEDBACK = range(1)

async def start_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –º–∞—Å—Ç–µ—Ä–µ –∏–ª–∏ —Å–∞–ª–æ–Ω–µ.\n"
        "–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∏–º—è –º–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return FEEDBACK

async def receive_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    feedback_text = update.message.text
    user = update.effective_user
    
    await sync_to_async(Feedback.objects.create)(
        client_telegram_id=user.id,
        client_name=f"{user.first_name} {user.last_name or ''}",
        text=feedback_text,
        telegram_username=user.username
    )
    
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.",
        reply_markup=await get_main_menu_keyboard()
    )
    return ConversationHandler.END

async def cancel_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–∑—ã–≤ –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
        reply_markup=await get_main_menu_keyboard()
    )
    return ConversationHandler.END


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è ORM –∑–∞–ø—Ä–æ—Å–æ–≤
@sync_to_async
def get_client_appointments(telegram_id):
    now = datetime.now()
    return list(Appointment.objects.filter(
        client__telegram_id=telegram_id,
        appointment_date__gte=now.date(),
        status='confirmed'
    ).select_related('service', 'master', 'salon').order_by('appointment_date', 'appointment_time'))

@sync_to_async
def cancel_appointment(appointment_id):
    try:
        appointment = Appointment.objects.get(id=appointment_id)
        appointment.status = 'cancelled'
        appointment.save()
        return True, appointment
    except Appointment.DoesNotExist:
        return False, None

@sync_to_async
def update_or_create_client(telegram_id, defaults):
    client, created = Client.objects.update_or_create(
        telegram_id=telegram_id,
        defaults=defaults
    )
    return client

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
async def my_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    appointments = await get_client_appointments(user.id)
    
    if not appointments:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.",
            reply_markup=await get_main_menu_keyboard()
        )
        return
    
    message = "üìÖ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
    keyboard = []
    
    for appointment in appointments:
        message += (
            f"üîπ {appointment.service.name} —É {appointment.master.first_name}\n"
            f"üè† –°–∞–ª–æ–Ω: {appointment.salon.name}\n"
            f"üìÖ –î–∞—Ç–∞: {appointment.appointment_date.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {appointment.appointment_time.strftime('%H:%M')}\n"
            f"üíµ –°—É–º–º–∞: {appointment.service.price}‚ÇΩ\n\n"  # –£–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã
        )
        keyboard.append([InlineKeyboardButton(
            f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {appointment.appointment_date.strftime('%d.%m')} –≤ {appointment.appointment_time.strftime('%H:%M')}",
            callback_data=f"cancel_{appointment.id}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    await update.message.reply_text(
        message,
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
async def cancel_appointment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    appointment_id = int(query.data.split('_')[1])
    success, appointment = await cancel_appointment(appointment_id)
    
    if success:
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ {appointment.appointment_date.strftime('%d.%m.%Y')} –≤ {appointment.appointment_time.strftime('%H:%M')} –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=None  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        )
    else:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=None
        )

async def send_tips(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tip_url = "https://pay.cloudtips.ru/p/b643f03c"
    
    await update.message.reply_text(
        "üíù –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ –Ω–∞—à–µ–º—É –º–∞—Å—Ç–µ—Ä—É —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:\n\n"
        f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {tip_url}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —â–µ–¥—Ä–æ—Å—Ç—å! –ú–∞—Å—Ç–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏—Ç –≤–∞—à—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=tip_url)]
        ])
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    await update_or_create_client(
        telegram_id=user.id,
        defaults={
            'first_name': user.first_name,
            'last_name': user.last_name or '',
            'telegram_username': user.username
        }
    )
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BeautyCity! üéâ\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await get_main_menu_keyboard()
    )


async def phone_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üìû –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n"
        f"‚òéÔ∏è {settings.MANAGER_PHONE}\n\n"
        f"–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 9:00 –¥–æ 19:00 –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö.",
        reply_markup=await get_main_menu_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –¥–ª—è –∑–∞–ø–∏—Å–∏!"
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=await get_main_menu_keyboard()
    )
    return ConversationHandler.END

def register_handlers(application):
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('cancel', cancel))
    application.add_handler(MessageHandler(filters.Regex('^–ú–æ–∏ –∑–∞–ø–∏—Å–∏$'), my_appointments))
    application.add_handler(MessageHandler(filters.Regex('^–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É$'), phone_booking))
    application.add_handler(CallbackQueryHandler(cancel_appointment_handler, pattern="^cancel_"))
    feedback_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤$'), start_feedback)],
        states={
            FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_feedback)]
        },
        fallbacks=[CommandHandler('cancel', cancel_feedback)]
    )
    application.add_handler(feedback_conv)
    application.add_handler(MessageHandler(filters.Regex('^–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ$'), send_tips))
